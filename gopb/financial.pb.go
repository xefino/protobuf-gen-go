// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.20.3
// source: protos/common/financial.proto

package gopb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of market associated with an asset
type Financial_Common_AssetClass int32

const (
	Financial_Common_Stock           Financial_Common_AssetClass = 0 // Traditional equities (stocks)
	Financial_Common_Option          Financial_Common_AssetClass = 1 // Options or derivatives (options)
	Financial_Common_Crypto          Financial_Common_AssetClass = 2 // Crypto-currency assets (crypto)
	Financial_Common_ForeignExchange Financial_Common_AssetClass = 3 // Foreign exchange (fx)
	Financial_Common_OverTheCounter  Financial_Common_AssetClass = 4 // Over-the-counter (otc)
	Financial_Common_Indices         Financial_Common_AssetClass = 5 // Indices
)

// Enum value maps for Financial_Common_AssetClass.
var (
	Financial_Common_AssetClass_name = map[int32]string{
		0: "Stock",
		1: "Option",
		2: "Crypto",
		3: "ForeignExchange",
		4: "OverTheCounter",
		5: "Indices",
	}
	Financial_Common_AssetClass_value = map[string]int32{
		"Stock":           0,
		"Option":          1,
		"Crypto":          2,
		"ForeignExchange": 3,
		"OverTheCounter":  4,
		"Indices":         5,
	}
)

func (x Financial_Common_AssetClass) Enum() *Financial_Common_AssetClass {
	p := new(Financial_Common_AssetClass)
	*p = x
	return p
}

func (x Financial_Common_AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Common_AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[0].Descriptor()
}

func (Financial_Common_AssetClass) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[0]
}

func (x Financial_Common_AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Common_AssetClass.Descriptor instead.
func (Financial_Common_AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Describes the type associated with an asset
type Financial_Common_AssetType int32

const (
	Financial_Common_CommonShare                        Financial_Common_AssetType = 0
	Financial_Common_OrdinaryShare                      Financial_Common_AssetType = 1
	Financial_Common_NewYorkRegistryShares              Financial_Common_AssetType = 2
	Financial_Common_AmericanDepositoryReceiptCommon    Financial_Common_AssetType = 3
	Financial_Common_AmericanDepositoryReceiptPreferred Financial_Common_AssetType = 4
	Financial_Common_AmericanDepositoryReceiptRights    Financial_Common_AssetType = 5
	Financial_Common_AmericanDepositoryReceiptWarrants  Financial_Common_AssetType = 6
	Financial_Common_GlobalDepositoryReceipts           Financial_Common_AssetType = 7
	Financial_Common_Unit                               Financial_Common_AssetType = 8
	Financial_Common_Rights                             Financial_Common_AssetType = 9
	Financial_Common_PreferredStock                     Financial_Common_AssetType = 10
	Financial_Common_Fund                               Financial_Common_AssetType = 11
	Financial_Common_StructuredProduct                  Financial_Common_AssetType = 12
	Financial_Common_Warrant                            Financial_Common_AssetType = 13
	Financial_Common_Index                              Financial_Common_AssetType = 14
	Financial_Common_ExchangeTradedFund                 Financial_Common_AssetType = 15
	Financial_Common_ExchangeTradedNote                 Financial_Common_AssetType = 16
	Financial_Common_CorporateBond                      Financial_Common_AssetType = 17
	Financial_Common_AgencyBond                         Financial_Common_AssetType = 18
	Financial_Common_EquityLinkedBond                   Financial_Common_AssetType = 19
	Financial_Common_Basket                             Financial_Common_AssetType = 20
	Financial_Common_LiquidatingTrust                   Financial_Common_AssetType = 21
	Financial_Common_Others                             Financial_Common_AssetType = 22
	Financial_Common_None                               Financial_Common_AssetType = 23
	Financial_Common_ExchangeTradeVehicle               Financial_Common_AssetType = 24
	Financial_Common_SingleSecurityETF                  Financial_Common_AssetType = 25
)

// Enum value maps for Financial_Common_AssetType.
var (
	Financial_Common_AssetType_name = map[int32]string{
		0:  "CommonShare",
		1:  "OrdinaryShare",
		2:  "NewYorkRegistryShares",
		3:  "AmericanDepositoryReceiptCommon",
		4:  "AmericanDepositoryReceiptPreferred",
		5:  "AmericanDepositoryReceiptRights",
		6:  "AmericanDepositoryReceiptWarrants",
		7:  "GlobalDepositoryReceipts",
		8:  "Unit",
		9:  "Rights",
		10: "PreferredStock",
		11: "Fund",
		12: "StructuredProduct",
		13: "Warrant",
		14: "Index",
		15: "ExchangeTradedFund",
		16: "ExchangeTradedNote",
		17: "CorporateBond",
		18: "AgencyBond",
		19: "EquityLinkedBond",
		20: "Basket",
		21: "LiquidatingTrust",
		22: "Others",
		23: "None",
		24: "ExchangeTradeVehicle",
		25: "SingleSecurityETF",
	}
	Financial_Common_AssetType_value = map[string]int32{
		"CommonShare":                        0,
		"OrdinaryShare":                      1,
		"NewYorkRegistryShares":              2,
		"AmericanDepositoryReceiptCommon":    3,
		"AmericanDepositoryReceiptPreferred": 4,
		"AmericanDepositoryReceiptRights":    5,
		"AmericanDepositoryReceiptWarrants":  6,
		"GlobalDepositoryReceipts":           7,
		"Unit":                               8,
		"Rights":                             9,
		"PreferredStock":                     10,
		"Fund":                               11,
		"StructuredProduct":                  12,
		"Warrant":                            13,
		"Index":                              14,
		"ExchangeTradedFund":                 15,
		"ExchangeTradedNote":                 16,
		"CorporateBond":                      17,
		"AgencyBond":                         18,
		"EquityLinkedBond":                   19,
		"Basket":                             20,
		"LiquidatingTrust":                   21,
		"Others":                             22,
		"None":                               23,
		"ExchangeTradeVehicle":               24,
		"SingleSecurityETF":                  25,
	}
)

func (x Financial_Common_AssetType) Enum() *Financial_Common_AssetType {
	p := new(Financial_Common_AssetType)
	*p = x
	return p
}

func (x Financial_Common_AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Common_AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[1].Descriptor()
}

func (Financial_Common_AssetType) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[1]
}

func (x Financial_Common_AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Common_AssetType.Descriptor instead.
func (Financial_Common_AssetType) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Type of locale being requested when exchange data is queried
type Financial_Common_Locale int32

const (
	Financial_Common_US     Financial_Common_Locale = 0 // US-markets only (us)
	Financial_Common_Global Financial_Common_Locale = 1 // Global markets (global)
)

// Enum value maps for Financial_Common_Locale.
var (
	Financial_Common_Locale_name = map[int32]string{
		0: "US",
		1: "Global",
	}
	Financial_Common_Locale_value = map[string]int32{
		"US":     0,
		"Global": 1,
	}
)

func (x Financial_Common_Locale) Enum() *Financial_Common_Locale {
	p := new(Financial_Common_Locale)
	*p = x
	return p
}

func (x Financial_Common_Locale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Common_Locale) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[2].Descriptor()
}

func (Financial_Common_Locale) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[2]
}

func (x Financial_Common_Locale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Common_Locale.Descriptor instead.
func (Financial_Common_Locale) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 0, 2}
}

// Tape associated with a given trade
type Financial_Common_Tape int32

const (
	Financial_Common_A Financial_Common_Tape = 0 // NYSE-listed securities
	Financial_Common_B Financial_Common_Tape = 1 // NYSE ARCA / NYSE American
	Financial_Common_C Financial_Common_Tape = 2 // NASDAQ
)

// Enum value maps for Financial_Common_Tape.
var (
	Financial_Common_Tape_name = map[int32]string{
		0: "A",
		1: "B",
		2: "C",
	}
	Financial_Common_Tape_value = map[string]int32{
		"A": 0,
		"B": 1,
		"C": 2,
	}
)

func (x Financial_Common_Tape) Enum() *Financial_Common_Tape {
	p := new(Financial_Common_Tape)
	*p = x
	return p
}

func (x Financial_Common_Tape) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Common_Tape) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[3].Descriptor()
}

func (Financial_Common_Tape) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[3]
}

func (x Financial_Common_Tape) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Common_Tape.Descriptor instead.
func (Financial_Common_Tape) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 0, 3}
}

// Describes the frequency with which a dividend is paid
type Financial_Dividends_Frequency int32

const (
	Financial_Dividends_NoFrequency  Financial_Dividends_Frequency = 0
	Financial_Dividends_Annually     Financial_Dividends_Frequency = 1
	Financial_Dividends_SemiAnnually Financial_Dividends_Frequency = 2
	Financial_Dividends_Quarterly    Financial_Dividends_Frequency = 4
	Financial_Dividends_Monthly      Financial_Dividends_Frequency = 12
	Financial_Dividends_Invalid      Financial_Dividends_Frequency = 13 // Code to hold invalid frequency values
)

// Enum value maps for Financial_Dividends_Frequency.
var (
	Financial_Dividends_Frequency_name = map[int32]string{
		0:  "NoFrequency",
		1:  "Annually",
		2:  "SemiAnnually",
		4:  "Quarterly",
		12: "Monthly",
		13: "Invalid",
	}
	Financial_Dividends_Frequency_value = map[string]int32{
		"NoFrequency":  0,
		"Annually":     1,
		"SemiAnnually": 2,
		"Quarterly":    4,
		"Monthly":      12,
		"Invalid":      13,
	}
)

func (x Financial_Dividends_Frequency) Enum() *Financial_Dividends_Frequency {
	p := new(Financial_Dividends_Frequency)
	*p = x
	return p
}

func (x Financial_Dividends_Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Dividends_Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[4].Descriptor()
}

func (Financial_Dividends_Frequency) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[4]
}

func (x Financial_Dividends_Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Dividends_Frequency.Descriptor instead.
func (Financial_Dividends_Frequency) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Describes the type of dividend
type Financial_Dividends_Type int32

const (
	Financial_Dividends_CD Financial_Dividends_Type = 0
	Financial_Dividends_SC Financial_Dividends_Type = 1
	Financial_Dividends_LT Financial_Dividends_Type = 2
	Financial_Dividends_ST Financial_Dividends_Type = 3
	Financial_Dividends_NP Financial_Dividends_Type = 4
)

// Enum value maps for Financial_Dividends_Type.
var (
	Financial_Dividends_Type_name = map[int32]string{
		0: "CD",
		1: "SC",
		2: "LT",
		3: "ST",
		4: "NP",
	}
	Financial_Dividends_Type_value = map[string]int32{
		"CD": 0,
		"SC": 1,
		"LT": 2,
		"ST": 3,
		"NP": 4,
	}
)

func (x Financial_Dividends_Type) Enum() *Financial_Dividends_Type {
	p := new(Financial_Dividends_Type)
	*p = x
	return p
}

func (x Financial_Dividends_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Dividends_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[5].Descriptor()
}

func (Financial_Dividends_Type) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[5]
}

func (x Financial_Dividends_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Dividends_Type.Descriptor instead.
func (Financial_Dividends_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 1, 1}
}

// Describes the type of exchange being represented
type Financial_Exchanges_Type int32

const (
	Financial_Exchanges_Exchange Financial_Exchanges_Type = 0
	Financial_Exchanges_TRF      Financial_Exchanges_Type = 1
	Financial_Exchanges_SIP      Financial_Exchanges_Type = 2
	Financial_Exchanges_ORF      Financial_Exchanges_Type = 3
)

// Enum value maps for Financial_Exchanges_Type.
var (
	Financial_Exchanges_Type_name = map[int32]string{
		0: "Exchange",
		1: "TRF",
		2: "SIP",
		3: "ORF",
	}
	Financial_Exchanges_Type_value = map[string]int32{
		"Exchange": 0,
		"TRF":      1,
		"SIP":      2,
		"ORF":      3,
	}
)

func (x Financial_Exchanges_Type) Enum() *Financial_Exchanges_Type {
	p := new(Financial_Exchanges_Type)
	*p = x
	return p
}

func (x Financial_Exchanges_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Exchanges_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[6].Descriptor()
}

func (Financial_Exchanges_Type) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[6]
}

func (x Financial_Exchanges_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Exchanges_Type.Descriptor instead.
func (Financial_Exchanges_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Describes the type of contract associated with an option
type Financial_Options_ContractType int32

const (
	Financial_Options_Call  Financial_Options_ContractType = 0
	Financial_Options_Put   Financial_Options_ContractType = 1
	Financial_Options_Other Financial_Options_ContractType = 2
)

// Enum value maps for Financial_Options_ContractType.
var (
	Financial_Options_ContractType_name = map[int32]string{
		0: "Call",
		1: "Put",
		2: "Other",
	}
	Financial_Options_ContractType_value = map[string]int32{
		"Call":  0,
		"Put":   1,
		"Other": 2,
	}
)

func (x Financial_Options_ContractType) Enum() *Financial_Options_ContractType {
	p := new(Financial_Options_ContractType)
	*p = x
	return p
}

func (x Financial_Options_ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Options_ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[7].Descriptor()
}

func (Financial_Options_ContractType) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[7]
}

func (x Financial_Options_ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Options_ContractType.Descriptor instead.
func (Financial_Options_ContractType) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Describes how an options contract is exercised
type Financial_Options_ExerciseStyle int32

const (
	Financial_Options_American Financial_Options_ExerciseStyle = 0
	Financial_Options_European Financial_Options_ExerciseStyle = 1
	Financial_Options_Bermudan Financial_Options_ExerciseStyle = 2
)

// Enum value maps for Financial_Options_ExerciseStyle.
var (
	Financial_Options_ExerciseStyle_name = map[int32]string{
		0: "American",
		1: "European",
		2: "Bermudan",
	}
	Financial_Options_ExerciseStyle_value = map[string]int32{
		"American": 0,
		"European": 1,
		"Bermudan": 2,
	}
)

func (x Financial_Options_ExerciseStyle) Enum() *Financial_Options_ExerciseStyle {
	p := new(Financial_Options_ExerciseStyle)
	*p = x
	return p
}

func (x Financial_Options_ExerciseStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Options_ExerciseStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[8].Descriptor()
}

func (Financial_Options_ExerciseStyle) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[8]
}

func (x Financial_Options_ExerciseStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Options_ExerciseStyle.Descriptor instead.
func (Financial_Options_ExerciseStyle) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 3, 1}
}

// Describes the underlying type associated with any additional underlying assets
// on an options contract
type Financial_Options_UnderlyingType int32

const (
	Financial_Options_Equity   Financial_Options_UnderlyingType = 0
	Financial_Options_Currency Financial_Options_UnderlyingType = 1
)

// Enum value maps for Financial_Options_UnderlyingType.
var (
	Financial_Options_UnderlyingType_name = map[int32]string{
		0: "Equity",
		1: "Currency",
	}
	Financial_Options_UnderlyingType_value = map[string]int32{
		"Equity":   0,
		"Currency": 1,
	}
)

func (x Financial_Options_UnderlyingType) Enum() *Financial_Options_UnderlyingType {
	p := new(Financial_Options_UnderlyingType)
	*p = x
	return p
}

func (x Financial_Options_UnderlyingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Options_UnderlyingType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[9].Descriptor()
}

func (Financial_Options_UnderlyingType) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[9]
}

func (x Financial_Options_UnderlyingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Options_UnderlyingType.Descriptor instead.
func (Financial_Options_UnderlyingType) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 3, 2}
}

// Describes a condition under which a quote occurred
type Financial_Quotes_Condition int32

const (
	Financial_Quotes_Regular                                   Financial_Quotes_Condition = 0   // Regular
	Financial_Quotes_RegularTwoSidedOpen                       Financial_Quotes_Condition = 1   // Regular Two-Sided Open
	Financial_Quotes_RegularOneSidedOpen                       Financial_Quotes_Condition = 2   // Regular One-Sided Open
	Financial_Quotes_SlowAsk                                   Financial_Quotes_Condition = 3   // Slow Ask
	Financial_Quotes_SlowBid                                   Financial_Quotes_Condition = 4   // Slow Bid
	Financial_Quotes_SlowBidAsk                                Financial_Quotes_Condition = 5   // Slow Bid Ask
	Financial_Quotes_SlowDueLRPBid                             Financial_Quotes_Condition = 6   // Slow Due LRP Bid
	Financial_Quotes_SlowDueLRPAsk                             Financial_Quotes_Condition = 7   // Slow Due LRP Ask
	Financial_Quotes_SlowDueNYSELRP                            Financial_Quotes_Condition = 8   // Slow Due NYSE LRP
	Financial_Quotes_SlowDueSetSlowListBidAsk                  Financial_Quotes_Condition = 9   // Slow Due Set, Slow List Bid Ask
	Financial_Quotes_ManualAskAutomatedBid                     Financial_Quotes_Condition = 10  // Manual Ask Automated Bid
	Financial_Quotes_ManualBidAutomatedAsk                     Financial_Quotes_Condition = 11  // Manual Bid Automated Ask
	Financial_Quotes_ManualBidAndAsk                           Financial_Quotes_Condition = 12  // Manual Bid and Ask
	Financial_Quotes_Opening                                   Financial_Quotes_Condition = 13  // Opening
	Financial_Quotes_Closing                                   Financial_Quotes_Condition = 14  // Closing
	Financial_Quotes_Closed                                    Financial_Quotes_Condition = 15  // Closed
	Financial_Quotes_Resume                                    Financial_Quotes_Condition = 16  // Resume
	Financial_Quotes_FastTrading                               Financial_Quotes_Condition = 17  // Fast Trading
	Financial_Quotes_TradingRangeIndicated                     Financial_Quotes_Condition = 18  // Trading Range Indication
	Financial_Quotes_MarketMakerQuotesClosed                   Financial_Quotes_Condition = 19  // Market-Maker Quotes Closed
	Financial_Quotes_NonFirm                                   Financial_Quotes_Condition = 20  // Non-Firm
	Financial_Quotes_NewsDissemination                         Financial_Quotes_Condition = 21  // News Dissemination
	Financial_Quotes_OrderInflux                               Financial_Quotes_Condition = 22  // Order Influx
	Financial_Quotes_OrderImbalance                            Financial_Quotes_Condition = 23  // Order Imbalance
	Financial_Quotes_DueToRelatedSecurityNewsDissemination     Financial_Quotes_Condition = 24  // Due to Related Security News Dissemination
	Financial_Quotes_DueToRelatedSecurityNewsPending           Financial_Quotes_Condition = 25  // Due to Related Security News Pending
	Financial_Quotes_AdditionalInformation                     Financial_Quotes_Condition = 26  // Additional Information
	Financial_Quotes_NewsPending                               Financial_Quotes_Condition = 27  // News Pending
	Financial_Quotes_AdditionalInformationDueToRelatedSecurity Financial_Quotes_Condition = 28  // Additional Information Due to Related Security
	Financial_Quotes_DueToRelatedSecurity                      Financial_Quotes_Condition = 29  // Due to Related Security
	Financial_Quotes_InViewOfCommon                            Financial_Quotes_Condition = 30  // In View of Common
	Financial_Quotes_EquipmentChangeover                       Financial_Quotes_Condition = 31  // Equipment Change-over
	Financial_Quotes_NoOpenNoResponse                          Financial_Quotes_Condition = 32  // No Open, No Response
	Financial_Quotes_SubPennyTrading                           Financial_Quotes_Condition = 33  // Sub-Penny Trading
	Financial_Quotes_AutomatedBidNoOfferNoBid                  Financial_Quotes_Condition = 34  // Automated No Offer, No Bid
	Financial_Quotes_LULDPriceBand                             Financial_Quotes_Condition = 35  // LULD Price Band
	Financial_Quotes_MarketWideCircuitBreakerLevel1            Financial_Quotes_Condition = 36  // Market-Wide Circuit Breaker 1
	Financial_Quotes_MarketWideCircuitBreakerLevel2            Financial_Quotes_Condition = 37  // Market-Wide Circuit Breaker 2
	Financial_Quotes_MarketWideCircuitBreakerLevel3            Financial_Quotes_Condition = 38  // Market-Wide Circuit Breaker 3
	Financial_Quotes_RepublishedLULDPriceBand                  Financial_Quotes_Condition = 39  // Republished LULD Price Band
	Financial_Quotes_OnDemandAuction                           Financial_Quotes_Condition = 40  // On-Demand Auction
	Financial_Quotes_CashOnlySettlement                        Financial_Quotes_Condition = 41  // Cash-Only Settlement
	Financial_Quotes_NextDaySettlement                         Financial_Quotes_Condition = 42  // Next-Day Settlement
	Financial_Quotes_LULDTradingPause                          Financial_Quotes_Condition = 43  // LULD Trading Pause
	Financial_Quotes_SlowDueLRPBidAsk                          Financial_Quotes_Condition = 71  // Slow Due LRP Bid/Ask
	Financial_Quotes_Cancel                                    Financial_Quotes_Condition = 80  // Cancel
	Financial_Quotes_CorrectedPrice                            Financial_Quotes_Condition = 81  // Corrected Price
	Financial_Quotes_SIPGenerated                              Financial_Quotes_Condition = 82  // SIP-Generated
	Financial_Quotes_Unknown                                   Financial_Quotes_Condition = 83  // Unknown
	Financial_Quotes_CrossedMarket                             Financial_Quotes_Condition = 84  // Crossed Market
	Financial_Quotes_LockedMarket                              Financial_Quotes_Condition = 85  // Locked Market
	Financial_Quotes_DepthOnOfferSide                          Financial_Quotes_Condition = 86  // Depth on Offer Side
	Financial_Quotes_DepthOnBidSide                            Financial_Quotes_Condition = 87  // Depth on Bid Side
	Financial_Quotes_DepthOnBidAndOffer                        Financial_Quotes_Condition = 88  // Depth on Bid and Offer
	Financial_Quotes_PreOpeningIndication                      Financial_Quotes_Condition = 89  // Pre-Opening Indication
	Financial_Quotes_SyndicateBid                              Financial_Quotes_Condition = 90  // Syndicate Bid
	Financial_Quotes_PreSyndicateBid                           Financial_Quotes_Condition = 91  // Pre-Syndicate Bid
	Financial_Quotes_PenaltyBid                                Financial_Quotes_Condition = 92  // Penalty Bid
	Financial_Quotes_CQSGenerated                              Financial_Quotes_Condition = 94  // CQS Generated
	Financial_Quotes_Invalid                                   Financial_Quotes_Condition = 999 // Invalid (actually value is -1 but that's not valid for protobuf enums)
)

// Enum value maps for Financial_Quotes_Condition.
var (
	Financial_Quotes_Condition_name = map[int32]string{
		0:   "Regular",
		1:   "RegularTwoSidedOpen",
		2:   "RegularOneSidedOpen",
		3:   "SlowAsk",
		4:   "SlowBid",
		5:   "SlowBidAsk",
		6:   "SlowDueLRPBid",
		7:   "SlowDueLRPAsk",
		8:   "SlowDueNYSELRP",
		9:   "SlowDueSetSlowListBidAsk",
		10:  "ManualAskAutomatedBid",
		11:  "ManualBidAutomatedAsk",
		12:  "ManualBidAndAsk",
		13:  "Opening",
		14:  "Closing",
		15:  "Closed",
		16:  "Resume",
		17:  "FastTrading",
		18:  "TradingRangeIndicated",
		19:  "MarketMakerQuotesClosed",
		20:  "NonFirm",
		21:  "NewsDissemination",
		22:  "OrderInflux",
		23:  "OrderImbalance",
		24:  "DueToRelatedSecurityNewsDissemination",
		25:  "DueToRelatedSecurityNewsPending",
		26:  "AdditionalInformation",
		27:  "NewsPending",
		28:  "AdditionalInformationDueToRelatedSecurity",
		29:  "DueToRelatedSecurity",
		30:  "InViewOfCommon",
		31:  "EquipmentChangeover",
		32:  "NoOpenNoResponse",
		33:  "SubPennyTrading",
		34:  "AutomatedBidNoOfferNoBid",
		35:  "LULDPriceBand",
		36:  "MarketWideCircuitBreakerLevel1",
		37:  "MarketWideCircuitBreakerLevel2",
		38:  "MarketWideCircuitBreakerLevel3",
		39:  "RepublishedLULDPriceBand",
		40:  "OnDemandAuction",
		41:  "CashOnlySettlement",
		42:  "NextDaySettlement",
		43:  "LULDTradingPause",
		71:  "SlowDueLRPBidAsk",
		80:  "Cancel",
		81:  "CorrectedPrice",
		82:  "SIPGenerated",
		83:  "Unknown",
		84:  "CrossedMarket",
		85:  "LockedMarket",
		86:  "DepthOnOfferSide",
		87:  "DepthOnBidSide",
		88:  "DepthOnBidAndOffer",
		89:  "PreOpeningIndication",
		90:  "SyndicateBid",
		91:  "PreSyndicateBid",
		92:  "PenaltyBid",
		94:  "CQSGenerated",
		999: "Invalid",
	}
	Financial_Quotes_Condition_value = map[string]int32{
		"Regular":                               0,
		"RegularTwoSidedOpen":                   1,
		"RegularOneSidedOpen":                   2,
		"SlowAsk":                               3,
		"SlowBid":                               4,
		"SlowBidAsk":                            5,
		"SlowDueLRPBid":                         6,
		"SlowDueLRPAsk":                         7,
		"SlowDueNYSELRP":                        8,
		"SlowDueSetSlowListBidAsk":              9,
		"ManualAskAutomatedBid":                 10,
		"ManualBidAutomatedAsk":                 11,
		"ManualBidAndAsk":                       12,
		"Opening":                               13,
		"Closing":                               14,
		"Closed":                                15,
		"Resume":                                16,
		"FastTrading":                           17,
		"TradingRangeIndicated":                 18,
		"MarketMakerQuotesClosed":               19,
		"NonFirm":                               20,
		"NewsDissemination":                     21,
		"OrderInflux":                           22,
		"OrderImbalance":                        23,
		"DueToRelatedSecurityNewsDissemination": 24,
		"DueToRelatedSecurityNewsPending":       25,
		"AdditionalInformation":                 26,
		"NewsPending":                           27,
		"AdditionalInformationDueToRelatedSecurity": 28,
		"DueToRelatedSecurity":                      29,
		"InViewOfCommon":                            30,
		"EquipmentChangeover":                       31,
		"NoOpenNoResponse":                          32,
		"SubPennyTrading":                           33,
		"AutomatedBidNoOfferNoBid":                  34,
		"LULDPriceBand":                             35,
		"MarketWideCircuitBreakerLevel1":            36,
		"MarketWideCircuitBreakerLevel2":            37,
		"MarketWideCircuitBreakerLevel3":            38,
		"RepublishedLULDPriceBand":                  39,
		"OnDemandAuction":                           40,
		"CashOnlySettlement":                        41,
		"NextDaySettlement":                         42,
		"LULDTradingPause":                          43,
		"SlowDueLRPBidAsk":                          71,
		"Cancel":                                    80,
		"CorrectedPrice":                            81,
		"SIPGenerated":                              82,
		"Unknown":                                   83,
		"CrossedMarket":                             84,
		"LockedMarket":                              85,
		"DepthOnOfferSide":                          86,
		"DepthOnBidSide":                            87,
		"DepthOnBidAndOffer":                        88,
		"PreOpeningIndication":                      89,
		"SyndicateBid":                              90,
		"PreSyndicateBid":                           91,
		"PenaltyBid":                                92,
		"CQSGenerated":                              94,
		"Invalid":                                   999,
	}
)

func (x Financial_Quotes_Condition) Enum() *Financial_Quotes_Condition {
	p := new(Financial_Quotes_Condition)
	*p = x
	return p
}

func (x Financial_Quotes_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Quotes_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[10].Descriptor()
}

func (Financial_Quotes_Condition) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[10]
}

func (x Financial_Quotes_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Quotes_Condition.Descriptor instead.
func (Financial_Quotes_Condition) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Describes an indicator associated with the quote condition
type Financial_Quotes_Indicator int32

const (
	// Nation BBO LULD Inidcators
	Financial_Quotes_NBBNBOExecutable                       Financial_Quotes_Indicator = 0 // NBB and/or NBO are Executable
	Financial_Quotes_NBBBelowLowerBand                      Financial_Quotes_Indicator = 1 // NBB below Lower Band
	Financial_Quotes_NBOAboveUpperBand                      Financial_Quotes_Indicator = 2 // NBO above Upper Band
	Financial_Quotes_NBBBelowLowerBandAndNBOAboveUpperBand  Financial_Quotes_Indicator = 3 // NBB below Lower Band and NBO above Upper Band
	Financial_Quotes_NBBEqualsUpperBand                     Financial_Quotes_Indicator = 4 // NBB equals Upper Band
	Financial_Quotes_NBOEqualsLowerBand                     Financial_Quotes_Indicator = 5 // NBO equals Lower Band
	Financial_Quotes_NBBEqualsUpperBandAndNBOAboveUpperBand Financial_Quotes_Indicator = 6 // NBB equals Upper Band and NBO above Upper Band
	Financial_Quotes_NBBBelowLowerBandAndNBOEqualsLowerBand Financial_Quotes_Indicator = 7 // NBB below Lower Band and NBO equals Lower Band
	// LULD BBO Inidcator / LULD Indicator CQS
	Financial_Quotes_BidPriceAboveUpperLimitPriceBand   Financial_Quotes_Indicator = 8  // Bid Price above Upper Limit Price Band
	Financial_Quotes_OfferPriceBelowLowerLimitPriceBand Financial_Quotes_Indicator = 9  // Offer Price below Lower Limit Price Band
	Financial_Quotes_BidAndOfferOutsidePriceBand        Financial_Quotes_Indicator = 10 // Bid and Offer outside Price Band
	// LULD Price Band Indicator
	Financial_Quotes_OpeningUpdate              Financial_Quotes_Indicator = 11 // Opening Update
	Financial_Quotes_IntraDayUpdate             Financial_Quotes_Indicator = 12 // Intra-Day Update
	Financial_Quotes_RestatedValue              Financial_Quotes_Indicator = 13 // Restated Value
	Financial_Quotes_SuspendedDuringTradingHalt Financial_Quotes_Indicator = 14 // Suspended during Trading Halt or Trading Pause
	Financial_Quotes_ReOpeningUpdate            Financial_Quotes_Indicator = 15 // Re-Opening Update
	Financial_Quotes_OutsidePriceBandRuleHours  Financial_Quotes_Indicator = 16 // Outside Price Band rule hours
	Financial_Quotes_AuctionExtension           Financial_Quotes_Indicator = 17 // Auction Extension (Auction Collar message)
	// LULD Indicator - CTS
	Financial_Quotes_LULDPriceBandInd                        Financial_Quotes_Indicator = 18 // LULD Price Band
	Financial_Quotes_RepublishedLULDPriceBandInd             Financial_Quotes_Indicator = 19 // Republished LULD Price Band
	Financial_Quotes_NBBLimitStateEntered                    Financial_Quotes_Indicator = 20 // NBB Limit State entered
	Financial_Quotes_NBBLimitStateExited                     Financial_Quotes_Indicator = 21 // NBB Limit State exited
	Financial_Quotes_NBOLimitStateEntered                    Financial_Quotes_Indicator = 22 // NBO Limit State entered
	Financial_Quotes_NBOLimitStateExited                     Financial_Quotes_Indicator = 23 // NBO Limit State exited
	Financial_Quotes_NBBAndNBOLimitStateEntered              Financial_Quotes_Indicator = 24 // NBB and NBO Limit State entered
	Financial_Quotes_NBBAndNBOLimitStateExited               Financial_Quotes_Indicator = 25 // NBB and NBO Limit State exited
	Financial_Quotes_NBBLimitStateEnteredNBOLimitStateExited Financial_Quotes_Indicator = 26 // NBB Limit State entered and NBO Limit State exited
	Financial_Quotes_NBBLimitStateExitedNBOLimitStateEntered Financial_Quotes_Indicator = 27 // NBB Limit State exited AND NBO Limit State entered
	// Financial Status (CTA / UTP)
	Financial_Quotes_Normal                        Financial_Quotes_Indicator = 28 // Normal
	Financial_Quotes_Bankrupt                      Financial_Quotes_Indicator = 29 // Bankrupt
	Financial_Quotes_Deficient                     Financial_Quotes_Indicator = 30 // Deficient - Below listing requirements
	Financial_Quotes_Delinquent                    Financial_Quotes_Indicator = 31 // Delinquent - Late filing
	Financial_Quotes_BankruptAndDeficient          Financial_Quotes_Indicator = 32 // Bankrupt and Deficient
	Financial_Quotes_BankruptAndDelinquent         Financial_Quotes_Indicator = 33 // Bankrupt and Delinquent
	Financial_Quotes_DeficientAndDelinquent        Financial_Quotes_Indicator = 34 // Deficient and Delinquent
	Financial_Quotes_DeficientDeliquentBankrupt    Financial_Quotes_Indicator = 35 // Deficient, Delinquent and Bankrupt
	Financial_Quotes_Liquidation                   Financial_Quotes_Indicator = 36 // Liquidation
	Financial_Quotes_CreationsSuspended            Financial_Quotes_Indicator = 37 // Creations Suspended
	Financial_Quotes_RedemptionsSuspended          Financial_Quotes_Indicator = 38 // Redemptions Suspended
	Financial_Quotes_CreationsRedemptionsSuspended Financial_Quotes_Indicator = 39 // Creations and/or Redemptions Suspended
	// CTA Security Status
	Financial_Quotes_NormalTrading              Financial_Quotes_Indicator = 40 // Normal Trading
	Financial_Quotes_OpeningDelay               Financial_Quotes_Indicator = 41 // Opening Delay
	Financial_Quotes_TradingHalt                Financial_Quotes_Indicator = 42 // Trading Halt
	Financial_Quotes_TradingResume              Financial_Quotes_Indicator = 43 // Resume
	Financial_Quotes_NoOpenNoResume             Financial_Quotes_Indicator = 44 // No Open / No Resume
	Financial_Quotes_PriceIndication            Financial_Quotes_Indicator = 45 // Price Indication
	Financial_Quotes_TradingRangeIndication     Financial_Quotes_Indicator = 46 // Trading Range Indication
	Financial_Quotes_MarketImbalanceBuy         Financial_Quotes_Indicator = 47 // Market Imbalance Buy
	Financial_Quotes_MarketImbalanceSell        Financial_Quotes_Indicator = 48 // Market Imbalance Sell
	Financial_Quotes_MarketOnCloseImbalanceBuy  Financial_Quotes_Indicator = 49 // Market On-Close Imbalance Buy
	Financial_Quotes_MarketOnCloseImbalanceSell Financial_Quotes_Indicator = 50 // Market On-Close Imbalance Sell
	Financial_Quotes_NoMarketImbalance          Financial_Quotes_Indicator = 51 // No Market Imbalance
	Financial_Quotes_NoMarketOnCloseImbalance   Financial_Quotes_Indicator = 52 // No Market On-Close Imbalance
	Financial_Quotes_ShortSaleRestriction       Financial_Quotes_Indicator = 53 // Short Sale Restriction
	Financial_Quotes_LimitUpLimitDown           Financial_Quotes_Indicator = 54 // Limit Up / Limit Down
	Financial_Quotes_QuotationResumption        Financial_Quotes_Indicator = 55 // Quotation Resumption
	Financial_Quotes_TradingResumption          Financial_Quotes_Indicator = 56 // Trading Resumption
	Financial_Quotes_VolatilityTradingPause     Financial_Quotes_Indicator = 57 // Volatility Trading Pause
	// CTA Halt Reason / UTP Trade Action Reason
	Financial_Quotes_Reserved                                    Financial_Quotes_Indicator = 58 // RESERVED
	Financial_Quotes_HaltNewsPending                             Financial_Quotes_Indicator = 59 // Halt: News Pending
	Financial_Quotes_UpdateNewsDissemination                     Financial_Quotes_Indicator = 60 // Update: News Dissemination
	Financial_Quotes_HaltSingleStockTradingPause                 Financial_Quotes_Indicator = 61 // Halt: Single Stock Trading Pause in affect
	Financial_Quotes_HaltRegulatoryExtraordinaryMarketActivity   Financial_Quotes_Indicator = 62 // Half: Regulatory Extraordinary Market Activity
	Financial_Quotes_HaltETF                                     Financial_Quotes_Indicator = 63 // Halt: ETF
	Financial_Quotes_HaltInformationRequested                    Financial_Quotes_Indicator = 64 // Halt: Information Requested
	Financial_Quotes_HaltExchangeNonCompliance                   Financial_Quotes_Indicator = 65 // Halt: Exchange Non-Compliance
	Financial_Quotes_HaltFilingsNotCurrent                       Financial_Quotes_Indicator = 66 // Halt: Filings not current
	Financial_Quotes_HaltSECTradingSuspension                    Financial_Quotes_Indicator = 67 // Halt: SEC Trading Suspension
	Financial_Quotes_HaltRegulatoryConcern                       Financial_Quotes_Indicator = 68 // Halt: Regulatory Concern
	Financial_Quotes_HaltMarketOperations                        Financial_Quotes_Indicator = 69 // Halt: Market Operations
	Financial_Quotes_IPOSecurityNotYetTrading                    Financial_Quotes_Indicator = 70 // IPO Security: Not yet Trading
	Financial_Quotes_HaltCorporateAction                         Financial_Quotes_Indicator = 71 // Halt: Corporate Action
	Financial_Quotes_QuotationNotAvailable                       Financial_Quotes_Indicator = 72 // Quotation Not Available
	Financial_Quotes_HaltVolatilityTradingPause                  Financial_Quotes_Indicator = 73 // Halt: Volatility Trading Pause
	Financial_Quotes_HaltVolatilityTradingPauseStraddleCondition Financial_Quotes_Indicator = 74 // Halt: Volatility Trading Pause - Straddle Condition
	Financial_Quotes_UpdateNewsAndResumptionTimes                Financial_Quotes_Indicator = 75 // Update: News and Resumption Times
	Financial_Quotes_HaltSingleStockTradingPauseQuotesOnly       Financial_Quotes_Indicator = 76 // Halt: Single Stock Trading Pause - Quotes Only
	Financial_Quotes_ResumeQualificationIssuesReviewedResolved   Financial_Quotes_Indicator = 77 // Resume: Qualification Issues Reviewed / Resolved
	Financial_Quotes_ResumeFilingRequirementsSatisfiedResolved   Financial_Quotes_Indicator = 78 // Resume: Filing Requirements Satisfied / Resolved
	Financial_Quotes_ResumeNewsNotForthcoming                    Financial_Quotes_Indicator = 79 // Resume: News not Forthcoming
	Financial_Quotes_ResumeQualificationsMaintRequirementsMet    Financial_Quotes_Indicator = 80 // Resume: Qualifications - Maintenance Requirements Met
	Financial_Quotes_ResumeQualificationsFilingsMet              Financial_Quotes_Indicator = 81 // Resume: Qualifications - Filings Met
	Financial_Quotes_ResumeRegulatoryAuth                        Financial_Quotes_Indicator = 82 // Resume: Regulatory Auth
	Financial_Quotes_NewIssueAvailable                           Financial_Quotes_Indicator = 83 // New Issue Available
	Financial_Quotes_IssueAvailable                              Financial_Quotes_Indicator = 84 // Issue Available
	Financial_Quotes_MWCBCarryFromPreviousDay                    Financial_Quotes_Indicator = 85 // MWCB - Carry from previous day
	Financial_Quotes_MWCBResume                                  Financial_Quotes_Indicator = 86 // MWCB - Resume
	Financial_Quotes_IPOSecurityReleasedForQuotation             Financial_Quotes_Indicator = 87 // IPO Security: Released for quotation
	Financial_Quotes_IPOSecurityPositioningWindowExtension       Financial_Quotes_Indicator = 88 // IPO Security: Positioning window extension
	Financial_Quotes_MWCBLevel1                                  Financial_Quotes_Indicator = 89 // MWCB - Level 1
	Financial_Quotes_MWCBLevel2                                  Financial_Quotes_Indicator = 90 // MWCB - Level 2
	Financial_Quotes_MWCBLevel3                                  Financial_Quotes_Indicator = 91 // MWCB - Level 3
	Financial_Quotes_HaltSubPennyTrading                         Financial_Quotes_Indicator = 92 // Halt: Sub-Penny Trading
	Financial_Quotes_OrderImbalanceInd                           Financial_Quotes_Indicator = 93 // Order Imbalance
	Financial_Quotes_LULDTradingPaused                           Financial_Quotes_Indicator = 94 // LULD Trading Pause
	// CTA Security Status
	Financial_Quotes_NONE                             Financial_Quotes_Indicator = 95  // None
	Financial_Quotes_ShortSalesRestrictionActivated   Financial_Quotes_Indicator = 96  // Short Sales Restriction Activated
	Financial_Quotes_ShortSalesRestrictionContinued   Financial_Quotes_Indicator = 97  // Short Sales Restriction Continued
	Financial_Quotes_ShortSalesRestrictionDeactivated Financial_Quotes_Indicator = 98  // Short Sales Restriction Deactivated
	Financial_Quotes_ShortSalesRestrictionInEffect    Financial_Quotes_Indicator = 99  // Short Sales Restriction in Effect
	Financial_Quotes_ShortSalesRestrictionMax         Financial_Quotes_Indicator = 100 // Short Sales Restriction Max
	// NBBO Indicators
	Financial_Quotes_NBBONoChange           Financial_Quotes_Indicator = 101 // NBBO_NO_CHANGE
	Financial_Quotes_NBBOQuoteIsNBBO        Financial_Quotes_Indicator = 102 // NBBO_QUOTE_IS_NBBO
	Financial_Quotes_NBBONoBBNoBO           Financial_Quotes_Indicator = 103 // NBBO_NO_BB_NO_BO
	Financial_Quotes_NBBOBBBOShortAppendage Financial_Quotes_Indicator = 104 // NBBO_BB_BO_SHORT_APPENDAGE
	Financial_Quotes_NBBOBBBOLongAppendage  Financial_Quotes_Indicator = 105 // NBBO_BB_BO_LONG_APPENDAGE
	// Held Trade Indicators
	Financial_Quotes_HeldTradeNotLastSaleNotConsolidated Financial_Quotes_Indicator = 106 // HELD_TRADE_NOT_LAST_SALE_AND_NOT_ON_CONSOLIDATED
	Financial_Quotes_HeldTradeLastSaleButNotConsolidated Financial_Quotes_Indicator = 107 // HELD_TRADE_LAST_SALE_BUT_NOT_ON_CONSOLIDATED
	Financial_Quotes_HeldTradeLastSaleAndConsolidated    Financial_Quotes_Indicator = 108 // HELD_TRADE_LAST_SALE_AND_ON_CONSOLIDATED
	// Miscellaneous Indicators
	Financial_Quotes_RetailInterestOnBid                    Financial_Quotes_Indicator = 109 // RETAIL_INTEREST_ON_BID
	Financial_Quotes_RetailInterestOnAsk                    Financial_Quotes_Indicator = 110 // RETAIL_INTEREST_ON_ASK
	Financial_Quotes_RetailInterestOnBidAndAsk              Financial_Quotes_Indicator = 111 // RETAIL_INTEREST_ON_BID_AND_ASK
	Financial_Quotes_FinraBBONoChange                       Financial_Quotes_Indicator = 112 // FINRA_BBO_NO_CHANGE
	Financial_Quotes_FinraBBODoesNotExist                   Financial_Quotes_Indicator = 113 // FINRA_BBO_DOES_NOT_EXIST
	Financial_Quotes_FinraBBBOExecutable                    Financial_Quotes_Indicator = 114 // FINRA_BB_BO_EXECUTABLE
	Financial_Quotes_FinraBBBelowLowerBand                  Financial_Quotes_Indicator = 115 // FINRA_BB_BELOW_LOWER_BAND
	Financial_Quotes_FinraBOAboveUpperBand                  Financial_Quotes_Indicator = 116 // FINRA_BO_ABOVE_UPPER_BAND
	Financial_Quotes_FinraBBBelowLowerBandBOAbboveUpperBand Financial_Quotes_Indicator = 117 // FINRA_BB_BELOW_LOWER_BAND_BO_ABOVE_UPPER_BAND
	Financial_Quotes_CTANotDueToRelatedSecurity             Financial_Quotes_Indicator = 118 // CTA_NOT_DUE_TO_RELATED_SECURITY
	Financial_Quotes_CTADueToRelatedSecurity                Financial_Quotes_Indicator = 119 // CTA_DUE_TO_RELATED_SECURITY
	Financial_Quotes_CTANotInViewOfCommon                   Financial_Quotes_Indicator = 120 // CTA_NOT_IN_VIEW_OF_COMMON
	Financial_Quotes_CTAInViewOfCommon                      Financial_Quotes_Indicator = 121 // CTA_IN_VIEW_OF_COMMON
	Financial_Quotes_CTAPriceIndicator                      Financial_Quotes_Indicator = 122 // CTA_PRICE_INDICATOR
	Financial_Quotes_CTANewPriceIndicator                   Financial_Quotes_Indicator = 123 // CTA_NEW_PRICE_INDICATOR
	Financial_Quotes_CTACorrectedPriceIndication            Financial_Quotes_Indicator = 124 // CTA_CORRECTED_PRICE_INDICATION
	Financial_Quotes_CTACancelledMarketImbalance            Financial_Quotes_Indicator = 125 // CTA_CANCELLED_MARKET_IMBALANCE_PRICE_TRADING_RANGE_INDICATION
)

// Enum value maps for Financial_Quotes_Indicator.
var (
	Financial_Quotes_Indicator_name = map[int32]string{
		0:   "NBBNBOExecutable",
		1:   "NBBBelowLowerBand",
		2:   "NBOAboveUpperBand",
		3:   "NBBBelowLowerBandAndNBOAboveUpperBand",
		4:   "NBBEqualsUpperBand",
		5:   "NBOEqualsLowerBand",
		6:   "NBBEqualsUpperBandAndNBOAboveUpperBand",
		7:   "NBBBelowLowerBandAndNBOEqualsLowerBand",
		8:   "BidPriceAboveUpperLimitPriceBand",
		9:   "OfferPriceBelowLowerLimitPriceBand",
		10:  "BidAndOfferOutsidePriceBand",
		11:  "OpeningUpdate",
		12:  "IntraDayUpdate",
		13:  "RestatedValue",
		14:  "SuspendedDuringTradingHalt",
		15:  "ReOpeningUpdate",
		16:  "OutsidePriceBandRuleHours",
		17:  "AuctionExtension",
		18:  "LULDPriceBandInd",
		19:  "RepublishedLULDPriceBandInd",
		20:  "NBBLimitStateEntered",
		21:  "NBBLimitStateExited",
		22:  "NBOLimitStateEntered",
		23:  "NBOLimitStateExited",
		24:  "NBBAndNBOLimitStateEntered",
		25:  "NBBAndNBOLimitStateExited",
		26:  "NBBLimitStateEnteredNBOLimitStateExited",
		27:  "NBBLimitStateExitedNBOLimitStateEntered",
		28:  "Normal",
		29:  "Bankrupt",
		30:  "Deficient",
		31:  "Delinquent",
		32:  "BankruptAndDeficient",
		33:  "BankruptAndDelinquent",
		34:  "DeficientAndDelinquent",
		35:  "DeficientDeliquentBankrupt",
		36:  "Liquidation",
		37:  "CreationsSuspended",
		38:  "RedemptionsSuspended",
		39:  "CreationsRedemptionsSuspended",
		40:  "NormalTrading",
		41:  "OpeningDelay",
		42:  "TradingHalt",
		43:  "TradingResume",
		44:  "NoOpenNoResume",
		45:  "PriceIndication",
		46:  "TradingRangeIndication",
		47:  "MarketImbalanceBuy",
		48:  "MarketImbalanceSell",
		49:  "MarketOnCloseImbalanceBuy",
		50:  "MarketOnCloseImbalanceSell",
		51:  "NoMarketImbalance",
		52:  "NoMarketOnCloseImbalance",
		53:  "ShortSaleRestriction",
		54:  "LimitUpLimitDown",
		55:  "QuotationResumption",
		56:  "TradingResumption",
		57:  "VolatilityTradingPause",
		58:  "Reserved",
		59:  "HaltNewsPending",
		60:  "UpdateNewsDissemination",
		61:  "HaltSingleStockTradingPause",
		62:  "HaltRegulatoryExtraordinaryMarketActivity",
		63:  "HaltETF",
		64:  "HaltInformationRequested",
		65:  "HaltExchangeNonCompliance",
		66:  "HaltFilingsNotCurrent",
		67:  "HaltSECTradingSuspension",
		68:  "HaltRegulatoryConcern",
		69:  "HaltMarketOperations",
		70:  "IPOSecurityNotYetTrading",
		71:  "HaltCorporateAction",
		72:  "QuotationNotAvailable",
		73:  "HaltVolatilityTradingPause",
		74:  "HaltVolatilityTradingPauseStraddleCondition",
		75:  "UpdateNewsAndResumptionTimes",
		76:  "HaltSingleStockTradingPauseQuotesOnly",
		77:  "ResumeQualificationIssuesReviewedResolved",
		78:  "ResumeFilingRequirementsSatisfiedResolved",
		79:  "ResumeNewsNotForthcoming",
		80:  "ResumeQualificationsMaintRequirementsMet",
		81:  "ResumeQualificationsFilingsMet",
		82:  "ResumeRegulatoryAuth",
		83:  "NewIssueAvailable",
		84:  "IssueAvailable",
		85:  "MWCBCarryFromPreviousDay",
		86:  "MWCBResume",
		87:  "IPOSecurityReleasedForQuotation",
		88:  "IPOSecurityPositioningWindowExtension",
		89:  "MWCBLevel1",
		90:  "MWCBLevel2",
		91:  "MWCBLevel3",
		92:  "HaltSubPennyTrading",
		93:  "OrderImbalanceInd",
		94:  "LULDTradingPaused",
		95:  "NONE",
		96:  "ShortSalesRestrictionActivated",
		97:  "ShortSalesRestrictionContinued",
		98:  "ShortSalesRestrictionDeactivated",
		99:  "ShortSalesRestrictionInEffect",
		100: "ShortSalesRestrictionMax",
		101: "NBBONoChange",
		102: "NBBOQuoteIsNBBO",
		103: "NBBONoBBNoBO",
		104: "NBBOBBBOShortAppendage",
		105: "NBBOBBBOLongAppendage",
		106: "HeldTradeNotLastSaleNotConsolidated",
		107: "HeldTradeLastSaleButNotConsolidated",
		108: "HeldTradeLastSaleAndConsolidated",
		109: "RetailInterestOnBid",
		110: "RetailInterestOnAsk",
		111: "RetailInterestOnBidAndAsk",
		112: "FinraBBONoChange",
		113: "FinraBBODoesNotExist",
		114: "FinraBBBOExecutable",
		115: "FinraBBBelowLowerBand",
		116: "FinraBOAboveUpperBand",
		117: "FinraBBBelowLowerBandBOAbboveUpperBand",
		118: "CTANotDueToRelatedSecurity",
		119: "CTADueToRelatedSecurity",
		120: "CTANotInViewOfCommon",
		121: "CTAInViewOfCommon",
		122: "CTAPriceIndicator",
		123: "CTANewPriceIndicator",
		124: "CTACorrectedPriceIndication",
		125: "CTACancelledMarketImbalance",
	}
	Financial_Quotes_Indicator_value = map[string]int32{
		"NBBNBOExecutable":                        0,
		"NBBBelowLowerBand":                       1,
		"NBOAboveUpperBand":                       2,
		"NBBBelowLowerBandAndNBOAboveUpperBand":   3,
		"NBBEqualsUpperBand":                      4,
		"NBOEqualsLowerBand":                      5,
		"NBBEqualsUpperBandAndNBOAboveUpperBand":  6,
		"NBBBelowLowerBandAndNBOEqualsLowerBand":  7,
		"BidPriceAboveUpperLimitPriceBand":        8,
		"OfferPriceBelowLowerLimitPriceBand":      9,
		"BidAndOfferOutsidePriceBand":             10,
		"OpeningUpdate":                           11,
		"IntraDayUpdate":                          12,
		"RestatedValue":                           13,
		"SuspendedDuringTradingHalt":              14,
		"ReOpeningUpdate":                         15,
		"OutsidePriceBandRuleHours":               16,
		"AuctionExtension":                        17,
		"LULDPriceBandInd":                        18,
		"RepublishedLULDPriceBandInd":             19,
		"NBBLimitStateEntered":                    20,
		"NBBLimitStateExited":                     21,
		"NBOLimitStateEntered":                    22,
		"NBOLimitStateExited":                     23,
		"NBBAndNBOLimitStateEntered":              24,
		"NBBAndNBOLimitStateExited":               25,
		"NBBLimitStateEnteredNBOLimitStateExited": 26,
		"NBBLimitStateExitedNBOLimitStateEntered": 27,
		"Normal":                                      28,
		"Bankrupt":                                    29,
		"Deficient":                                   30,
		"Delinquent":                                  31,
		"BankruptAndDeficient":                        32,
		"BankruptAndDelinquent":                       33,
		"DeficientAndDelinquent":                      34,
		"DeficientDeliquentBankrupt":                  35,
		"Liquidation":                                 36,
		"CreationsSuspended":                          37,
		"RedemptionsSuspended":                        38,
		"CreationsRedemptionsSuspended":               39,
		"NormalTrading":                               40,
		"OpeningDelay":                                41,
		"TradingHalt":                                 42,
		"TradingResume":                               43,
		"NoOpenNoResume":                              44,
		"PriceIndication":                             45,
		"TradingRangeIndication":                      46,
		"MarketImbalanceBuy":                          47,
		"MarketImbalanceSell":                         48,
		"MarketOnCloseImbalanceBuy":                   49,
		"MarketOnCloseImbalanceSell":                  50,
		"NoMarketImbalance":                           51,
		"NoMarketOnCloseImbalance":                    52,
		"ShortSaleRestriction":                        53,
		"LimitUpLimitDown":                            54,
		"QuotationResumption":                         55,
		"TradingResumption":                           56,
		"VolatilityTradingPause":                      57,
		"Reserved":                                    58,
		"HaltNewsPending":                             59,
		"UpdateNewsDissemination":                     60,
		"HaltSingleStockTradingPause":                 61,
		"HaltRegulatoryExtraordinaryMarketActivity":   62,
		"HaltETF":                                     63,
		"HaltInformationRequested":                    64,
		"HaltExchangeNonCompliance":                   65,
		"HaltFilingsNotCurrent":                       66,
		"HaltSECTradingSuspension":                    67,
		"HaltRegulatoryConcern":                       68,
		"HaltMarketOperations":                        69,
		"IPOSecurityNotYetTrading":                    70,
		"HaltCorporateAction":                         71,
		"QuotationNotAvailable":                       72,
		"HaltVolatilityTradingPause":                  73,
		"HaltVolatilityTradingPauseStraddleCondition": 74,
		"UpdateNewsAndResumptionTimes":                75,
		"HaltSingleStockTradingPauseQuotesOnly":       76,
		"ResumeQualificationIssuesReviewedResolved":   77,
		"ResumeFilingRequirementsSatisfiedResolved":   78,
		"ResumeNewsNotForthcoming":                    79,
		"ResumeQualificationsMaintRequirementsMet":    80,
		"ResumeQualificationsFilingsMet":              81,
		"ResumeRegulatoryAuth":                        82,
		"NewIssueAvailable":                           83,
		"IssueAvailable":                              84,
		"MWCBCarryFromPreviousDay":                    85,
		"MWCBResume":                                  86,
		"IPOSecurityReleasedForQuotation":             87,
		"IPOSecurityPositioningWindowExtension":       88,
		"MWCBLevel1":                                  89,
		"MWCBLevel2":                                  90,
		"MWCBLevel3":                                  91,
		"HaltSubPennyTrading":                         92,
		"OrderImbalanceInd":                           93,
		"LULDTradingPaused":                           94,
		"NONE":                                        95,
		"ShortSalesRestrictionActivated":              96,
		"ShortSalesRestrictionContinued":              97,
		"ShortSalesRestrictionDeactivated":            98,
		"ShortSalesRestrictionInEffect":               99,
		"ShortSalesRestrictionMax":                    100,
		"NBBONoChange":                                101,
		"NBBOQuoteIsNBBO":                             102,
		"NBBONoBBNoBO":                                103,
		"NBBOBBBOShortAppendage":                      104,
		"NBBOBBBOLongAppendage":                       105,
		"HeldTradeNotLastSaleNotConsolidated":         106,
		"HeldTradeLastSaleButNotConsolidated":         107,
		"HeldTradeLastSaleAndConsolidated":            108,
		"RetailInterestOnBid":                         109,
		"RetailInterestOnAsk":                         110,
		"RetailInterestOnBidAndAsk":                   111,
		"FinraBBONoChange":                            112,
		"FinraBBODoesNotExist":                        113,
		"FinraBBBOExecutable":                         114,
		"FinraBBBelowLowerBand":                       115,
		"FinraBOAboveUpperBand":                       116,
		"FinraBBBelowLowerBandBOAbboveUpperBand":      117,
		"CTANotDueToRelatedSecurity":                  118,
		"CTADueToRelatedSecurity":                     119,
		"CTANotInViewOfCommon":                        120,
		"CTAInViewOfCommon":                           121,
		"CTAPriceIndicator":                           122,
		"CTANewPriceIndicator":                        123,
		"CTACorrectedPriceIndication":                 124,
		"CTACancelledMarketImbalance":                 125,
	}
)

func (x Financial_Quotes_Indicator) Enum() *Financial_Quotes_Indicator {
	p := new(Financial_Quotes_Indicator)
	*p = x
	return p
}

func (x Financial_Quotes_Indicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Quotes_Indicator) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[11].Descriptor()
}

func (Financial_Quotes_Indicator) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[11]
}

func (x Financial_Quotes_Indicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Quotes_Indicator.Descriptor instead.
func (Financial_Quotes_Indicator) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 4, 1}
}

// Describes a condition under which a trade occurred
type Financial_Trades_Condition int32

const (
	Financial_Trades_RegularSale                                       Financial_Trades_Condition = 0   // Regular Sale
	Financial_Trades_Acquisition                                       Financial_Trades_Condition = 1   // Acquisition
	Financial_Trades_AveragePriceTrade                                 Financial_Trades_Condition = 2   // Average Price Trade
	Financial_Trades_AutomaticExecution                                Financial_Trades_Condition = 3   // Automatic Execution
	Financial_Trades_BunchedTrade                                      Financial_Trades_Condition = 4   // Bunched Trade
	Financial_Trades_BunchedSoldTrade                                  Financial_Trades_Condition = 5   // Bunched Sold Trade
	Financial_Trades_CAPElection                                       Financial_Trades_Condition = 6   // CAP Election
	Financial_Trades_CashSale                                          Financial_Trades_Condition = 7   // Cash Sale
	Financial_Trades_ClosingPrints                                     Financial_Trades_Condition = 8   // Closing Prints
	Financial_Trades_CrossTrade                                        Financial_Trades_Condition = 9   // Cross Trade
	Financial_Trades_DerivativelyPriced                                Financial_Trades_Condition = 10  // Derivatively Priced
	Financial_Trades_Distribution                                      Financial_Trades_Condition = 11  // Distribution
	Financial_Trades_FormT                                             Financial_Trades_Condition = 12  // Form T
	Financial_Trades_ExtendedTradingHours                              Financial_Trades_Condition = 13  // Extended Trading Hours (Sold Out of Sequence)
	Financial_Trades_IntermarketSweep                                  Financial_Trades_Condition = 14  // Intermarket Sweep
	Financial_Trades_MarketCenterOfficialClose                         Financial_Trades_Condition = 15  // Market Center Official Close
	Financial_Trades_MarketCenterOfficialOpen                          Financial_Trades_Condition = 16  // Market Center Official Open
	Financial_Trades_MarketCenterOpeningTrade                          Financial_Trades_Condition = 17  // Market Center Opening Trade
	Financial_Trades_MarketCenterReopeningTrade                        Financial_Trades_Condition = 18  // Market Center Reopening Trade
	Financial_Trades_MarketCenterClosingTrade                          Financial_Trades_Condition = 19  // Market Center Closing Trade
	Financial_Trades_NextDay                                           Financial_Trades_Condition = 20  // Next Day
	Financial_Trades_PriceVariationTrade                               Financial_Trades_Condition = 21  // Price Variation Trade
	Financial_Trades_PriorReferencePrice                               Financial_Trades_Condition = 22  // Prior Reference Price
	Financial_Trades_Rule155Trade                                      Financial_Trades_Condition = 23  // Rule 155 Trade (AMEX)
	Financial_Trades_Rule127NYSE                                       Financial_Trades_Condition = 24  // Rule 127 NYSE
	Financial_Trades_OpeningPrints                                     Financial_Trades_Condition = 25  // Opening Prints
	Financial_Trades_Opened                                            Financial_Trades_Condition = 26  // Opened
	Financial_Trades_StoppedStock                                      Financial_Trades_Condition = 27  // Stopped Stock (Regular Trade)
	Financial_Trades_ReOpeningPrints                                   Financial_Trades_Condition = 28  // Re-Opening Prints
	Financial_Trades_Seller                                            Financial_Trades_Condition = 29  // Seller
	Financial_Trades_SoldLast                                          Financial_Trades_Condition = 30  // Sold Last
	Financial_Trades_SoldLastAndStoppedStock                           Financial_Trades_Condition = 31  // Sold Last and Stopped Stock
	Financial_Trades_SoldOut                                           Financial_Trades_Condition = 32  // Sold Out
	Financial_Trades_SoldOutOfSequence                                 Financial_Trades_Condition = 33  // Sold (Out of Sequence)
	Financial_Trades_SplitTrade                                        Financial_Trades_Condition = 34  // Split Trade
	Financial_Trades_StockOption                                       Financial_Trades_Condition = 35  // Stock Option
	Financial_Trades_YellowFlagRegularTrade                            Financial_Trades_Condition = 36  // Yellow Flag Regular Trade
	Financial_Trades_OddLotTrade                                       Financial_Trades_Condition = 37  // Odd Lot Trade
	Financial_Trades_CorrectedConsolidatedClose                        Financial_Trades_Condition = 38  // Corrected Consolidated Close (per listing market)
	Financial_Trades_Unknown                                           Financial_Trades_Condition = 39  // Unknown
	Financial_Trades_Held                                              Financial_Trades_Condition = 40  // Held
	Financial_Trades_TradeThruExempt                                   Financial_Trades_Condition = 41  // Trade Thru Exempt
	Financial_Trades_NonEligible                                       Financial_Trades_Condition = 42  // Non-Eligible
	Financial_Trades_NonEligibleExtended                               Financial_Trades_Condition = 43  // Non-Eligible Extended
	Financial_Trades_Cancelled                                         Financial_Trades_Condition = 44  // Cancelled
	Financial_Trades_Recovery                                          Financial_Trades_Condition = 45  // Recovery
	Financial_Trades_Correction                                        Financial_Trades_Condition = 46  // Correction
	Financial_Trades_AsOf                                              Financial_Trades_Condition = 47  // As of
	Financial_Trades_AsOfCorrection                                    Financial_Trades_Condition = 48  // As of Correction
	Financial_Trades_AsOfCancel                                        Financial_Trades_Condition = 49  // As of Cancel
	Financial_Trades_OOB                                               Financial_Trades_Condition = 50  // OOB
	Financial_Trades_Summary                                           Financial_Trades_Condition = 51  // Summary
	Financial_Trades_ContingentTrade                                   Financial_Trades_Condition = 52  // Contingent Trade
	Financial_Trades_QualifiedContingentTrade                          Financial_Trades_Condition = 53  // Qualified Contingent Trade (QCT)
	Financial_Trades_Errored                                           Financial_Trades_Condition = 54  // Errored
	Financial_Trades_OpeningReopeningTradeDetail                       Financial_Trades_Condition = 55  // OPENING_REOPENING_TRADE_DETAIL
	Financial_Trades_Placeholder                                       Financial_Trades_Condition = 56  // Placeholder
	Financial_Trades_ShortSaleRestrictionActivated                     Financial_Trades_Condition = 57  // Short Sale Restriction Activated
	Financial_Trades_ShortSaleRestrictionContinued                     Financial_Trades_Condition = 58  // Short Sale Restriction Continued
	Financial_Trades_ShortSaleRestrictionDeactivated                   Financial_Trades_Condition = 59  // Short Sale Restriction Deactivated
	Financial_Trades_ShortSaleRestrictionInEffect                      Financial_Trades_Condition = 60  // Short Sale Restriction In Effect
	Financial_Trades_FinancialStatusBankrupt                           Financial_Trades_Condition = 62  // Financial Status - Bankrupt
	Financial_Trades_FinancialStatusDeficient                          Financial_Trades_Condition = 63  // Financial Status - Deficient
	Financial_Trades_FinancialStatusDelinquent                         Financial_Trades_Condition = 64  // Financial Status - Delinquent
	Financial_Trades_FinancialStatusBankruptAndDeficient               Financial_Trades_Condition = 65  // Financial Status - Bankrupt and Deficient
	Financial_Trades_FinancialStatusBankruptAndDelinquent              Financial_Trades_Condition = 66  // Financial Status - Bankrupt and Delinquent
	Financial_Trades_FinancialStatusDeficientAndDelinquent             Financial_Trades_Condition = 67  // Financial Status - Deficient and Delinquent
	Financial_Trades_FinancialStatusDeficientDelinquentBankrupt        Financial_Trades_Condition = 68  // Financial Status - Deficient, Delinquent, and Bankrupt
	Financial_Trades_FinancialStatusLiquidation                        Financial_Trades_Condition = 69  // Financial Status - Liquidation
	Financial_Trades_FinancialStatusCreationsSuspended                 Financial_Trades_Condition = 70  // Financial Status - Creations Suspended
	Financial_Trades_FinancialStatusRedemptionsSuspended               Financial_Trades_Condition = 71  // Financial Status - Redemptions Suspended
	Financial_Trades_Canceled                                          Financial_Trades_Condition = 201 // Canceled
	Financial_Trades_LateAndOutOfSequence                              Financial_Trades_Condition = 202 // Late and Out Of Sequence
	Financial_Trades_LastAndCanceled                                   Financial_Trades_Condition = 203 // Last and Canceled
	Financial_Trades_Late                                              Financial_Trades_Condition = 204 // Late
	Financial_Trades_OpeningTradeAndCanceled                           Financial_Trades_Condition = 205 // Opening Trade and Canceled
	Financial_Trades_OpeningTradeLateAndOutOfSequence                  Financial_Trades_Condition = 206 // Opening Trade, Late, and Out Of Sequence
	Financial_Trades_OnlyTradeAndCanceled                              Financial_Trades_Condition = 207 // Only Trade and Canceled
	Financial_Trades_OpeningTradeAndLate                               Financial_Trades_Condition = 208 // Opening Trade and Late
	Financial_Trades_AutomaticExecutionOption                          Financial_Trades_Condition = 209 // Automatic Execution (options)
	Financial_Trades_ReopeningTrade                                    Financial_Trades_Condition = 210 // Reopening Trade
	Financial_Trades_IntermarketSweepOrder                             Financial_Trades_Condition = 219 // Intermarket Sweep Order
	Financial_Trades_SingleLegAuctionNonISO                            Financial_Trades_Condition = 227 // Single Leg Auction Non ISO
	Financial_Trades_SingleLegAuctionISO                               Financial_Trades_Condition = 228 // Single Leg Auction ISO
	Financial_Trades_SingleLegCrossNonISO                              Financial_Trades_Condition = 229 // Single Leg Cross Non ISO
	Financial_Trades_SingleLegCrossISO                                 Financial_Trades_Condition = 230 // Single Leg Cross ISO
	Financial_Trades_SingleLegFloorTrade                               Financial_Trades_Condition = 231 // Single Leg Floor Trade
	Financial_Trades_MultiLegAutoElectronicTrade                       Financial_Trades_Condition = 232 // Multi Leg auto-electronic trade
	Financial_Trades_MultiLegAuction                                   Financial_Trades_Condition = 233 // Multi Leg Auction
	Financial_Trades_MultiLegCross                                     Financial_Trades_Condition = 234 // Multi Leg Cross
	Financial_Trades_MultiLegFloorTrade                                Financial_Trades_Condition = 235 // Multi Leg floor trade
	Financial_Trades_MultiLegAutoElectronicTradeAgainstSingleLeg       Financial_Trades_Condition = 236 // Multi Leg auto-electronic trade against single leg(s)
	Financial_Trades_StockOptionsAuction                               Financial_Trades_Condition = 237 // Stock Options Auction
	Financial_Trades_MultiLegAuctionAgainstSingleLeg                   Financial_Trades_Condition = 238 // Multi Leg Auction against single leg(s)
	Financial_Trades_MultiLegFloorTradeAgainstSingleLeg                Financial_Trades_Condition = 239 // Multi Leg floor trade against single leg(s)
	Financial_Trades_StockOptionsAutoElectronicTrade                   Financial_Trades_Condition = 240 // Stock Options auto-electronic trade
	Financial_Trades_StockOptionsCross                                 Financial_Trades_Condition = 241 // Stock Options Cross
	Financial_Trades_StockOptionsFloorTrade                            Financial_Trades_Condition = 242 // Stock Options floor trade
	Financial_Trades_StockOptionsAutoElectronicTradeAgainstSingleLeg   Financial_Trades_Condition = 243 // Stock Options auto-electronic trade against single leg(s)
	Financial_Trades_StockOptionsAuctionAgainstSingleLeg               Financial_Trades_Condition = 244 // Stock Options Auction against single leg(s)
	Financial_Trades_StockOptionsFloorTradeAgainstSingleLeg            Financial_Trades_Condition = 245 // Stock Options floor trade against single leg(s)
	Financial_Trades_MultiLegFloorTradeOfProprietaryProducts           Financial_Trades_Condition = 246 // Multi Leg Floor Trade of Proprietary Products
	Financial_Trades_MultilateralCompressionTradeOfProprietaryProducts Financial_Trades_Condition = 247 // Multilateral Compression Trade of Proprietary Products
	Financial_Trades_ExtendedHoursTrade                                Financial_Trades_Condition = 248 // Extended Hours Trade
)

// Enum value maps for Financial_Trades_Condition.
var (
	Financial_Trades_Condition_name = map[int32]string{
		0:   "RegularSale",
		1:   "Acquisition",
		2:   "AveragePriceTrade",
		3:   "AutomaticExecution",
		4:   "BunchedTrade",
		5:   "BunchedSoldTrade",
		6:   "CAPElection",
		7:   "CashSale",
		8:   "ClosingPrints",
		9:   "CrossTrade",
		10:  "DerivativelyPriced",
		11:  "Distribution",
		12:  "FormT",
		13:  "ExtendedTradingHours",
		14:  "IntermarketSweep",
		15:  "MarketCenterOfficialClose",
		16:  "MarketCenterOfficialOpen",
		17:  "MarketCenterOpeningTrade",
		18:  "MarketCenterReopeningTrade",
		19:  "MarketCenterClosingTrade",
		20:  "NextDay",
		21:  "PriceVariationTrade",
		22:  "PriorReferencePrice",
		23:  "Rule155Trade",
		24:  "Rule127NYSE",
		25:  "OpeningPrints",
		26:  "Opened",
		27:  "StoppedStock",
		28:  "ReOpeningPrints",
		29:  "Seller",
		30:  "SoldLast",
		31:  "SoldLastAndStoppedStock",
		32:  "SoldOut",
		33:  "SoldOutOfSequence",
		34:  "SplitTrade",
		35:  "StockOption",
		36:  "YellowFlagRegularTrade",
		37:  "OddLotTrade",
		38:  "CorrectedConsolidatedClose",
		39:  "Unknown",
		40:  "Held",
		41:  "TradeThruExempt",
		42:  "NonEligible",
		43:  "NonEligibleExtended",
		44:  "Cancelled",
		45:  "Recovery",
		46:  "Correction",
		47:  "AsOf",
		48:  "AsOfCorrection",
		49:  "AsOfCancel",
		50:  "OOB",
		51:  "Summary",
		52:  "ContingentTrade",
		53:  "QualifiedContingentTrade",
		54:  "Errored",
		55:  "OpeningReopeningTradeDetail",
		56:  "Placeholder",
		57:  "ShortSaleRestrictionActivated",
		58:  "ShortSaleRestrictionContinued",
		59:  "ShortSaleRestrictionDeactivated",
		60:  "ShortSaleRestrictionInEffect",
		62:  "FinancialStatusBankrupt",
		63:  "FinancialStatusDeficient",
		64:  "FinancialStatusDelinquent",
		65:  "FinancialStatusBankruptAndDeficient",
		66:  "FinancialStatusBankruptAndDelinquent",
		67:  "FinancialStatusDeficientAndDelinquent",
		68:  "FinancialStatusDeficientDelinquentBankrupt",
		69:  "FinancialStatusLiquidation",
		70:  "FinancialStatusCreationsSuspended",
		71:  "FinancialStatusRedemptionsSuspended",
		201: "Canceled",
		202: "LateAndOutOfSequence",
		203: "LastAndCanceled",
		204: "Late",
		205: "OpeningTradeAndCanceled",
		206: "OpeningTradeLateAndOutOfSequence",
		207: "OnlyTradeAndCanceled",
		208: "OpeningTradeAndLate",
		209: "AutomaticExecutionOption",
		210: "ReopeningTrade",
		219: "IntermarketSweepOrder",
		227: "SingleLegAuctionNonISO",
		228: "SingleLegAuctionISO",
		229: "SingleLegCrossNonISO",
		230: "SingleLegCrossISO",
		231: "SingleLegFloorTrade",
		232: "MultiLegAutoElectronicTrade",
		233: "MultiLegAuction",
		234: "MultiLegCross",
		235: "MultiLegFloorTrade",
		236: "MultiLegAutoElectronicTradeAgainstSingleLeg",
		237: "StockOptionsAuction",
		238: "MultiLegAuctionAgainstSingleLeg",
		239: "MultiLegFloorTradeAgainstSingleLeg",
		240: "StockOptionsAutoElectronicTrade",
		241: "StockOptionsCross",
		242: "StockOptionsFloorTrade",
		243: "StockOptionsAutoElectronicTradeAgainstSingleLeg",
		244: "StockOptionsAuctionAgainstSingleLeg",
		245: "StockOptionsFloorTradeAgainstSingleLeg",
		246: "MultiLegFloorTradeOfProprietaryProducts",
		247: "MultilateralCompressionTradeOfProprietaryProducts",
		248: "ExtendedHoursTrade",
	}
	Financial_Trades_Condition_value = map[string]int32{
		"RegularSale":                           0,
		"Acquisition":                           1,
		"AveragePriceTrade":                     2,
		"AutomaticExecution":                    3,
		"BunchedTrade":                          4,
		"BunchedSoldTrade":                      5,
		"CAPElection":                           6,
		"CashSale":                              7,
		"ClosingPrints":                         8,
		"CrossTrade":                            9,
		"DerivativelyPriced":                    10,
		"Distribution":                          11,
		"FormT":                                 12,
		"ExtendedTradingHours":                  13,
		"IntermarketSweep":                      14,
		"MarketCenterOfficialClose":             15,
		"MarketCenterOfficialOpen":              16,
		"MarketCenterOpeningTrade":              17,
		"MarketCenterReopeningTrade":            18,
		"MarketCenterClosingTrade":              19,
		"NextDay":                               20,
		"PriceVariationTrade":                   21,
		"PriorReferencePrice":                   22,
		"Rule155Trade":                          23,
		"Rule127NYSE":                           24,
		"OpeningPrints":                         25,
		"Opened":                                26,
		"StoppedStock":                          27,
		"ReOpeningPrints":                       28,
		"Seller":                                29,
		"SoldLast":                              30,
		"SoldLastAndStoppedStock":               31,
		"SoldOut":                               32,
		"SoldOutOfSequence":                     33,
		"SplitTrade":                            34,
		"StockOption":                           35,
		"YellowFlagRegularTrade":                36,
		"OddLotTrade":                           37,
		"CorrectedConsolidatedClose":            38,
		"Unknown":                               39,
		"Held":                                  40,
		"TradeThruExempt":                       41,
		"NonEligible":                           42,
		"NonEligibleExtended":                   43,
		"Cancelled":                             44,
		"Recovery":                              45,
		"Correction":                            46,
		"AsOf":                                  47,
		"AsOfCorrection":                        48,
		"AsOfCancel":                            49,
		"OOB":                                   50,
		"Summary":                               51,
		"ContingentTrade":                       52,
		"QualifiedContingentTrade":              53,
		"Errored":                               54,
		"OpeningReopeningTradeDetail":           55,
		"Placeholder":                           56,
		"ShortSaleRestrictionActivated":         57,
		"ShortSaleRestrictionContinued":         58,
		"ShortSaleRestrictionDeactivated":       59,
		"ShortSaleRestrictionInEffect":          60,
		"FinancialStatusBankrupt":               62,
		"FinancialStatusDeficient":              63,
		"FinancialStatusDelinquent":             64,
		"FinancialStatusBankruptAndDeficient":   65,
		"FinancialStatusBankruptAndDelinquent":  66,
		"FinancialStatusDeficientAndDelinquent": 67,
		"FinancialStatusDeficientDelinquentBankrupt":        68,
		"FinancialStatusLiquidation":                        69,
		"FinancialStatusCreationsSuspended":                 70,
		"FinancialStatusRedemptionsSuspended":               71,
		"Canceled":                                          201,
		"LateAndOutOfSequence":                              202,
		"LastAndCanceled":                                   203,
		"Late":                                              204,
		"OpeningTradeAndCanceled":                           205,
		"OpeningTradeLateAndOutOfSequence":                  206,
		"OnlyTradeAndCanceled":                              207,
		"OpeningTradeAndLate":                               208,
		"AutomaticExecutionOption":                          209,
		"ReopeningTrade":                                    210,
		"IntermarketSweepOrder":                             219,
		"SingleLegAuctionNonISO":                            227,
		"SingleLegAuctionISO":                               228,
		"SingleLegCrossNonISO":                              229,
		"SingleLegCrossISO":                                 230,
		"SingleLegFloorTrade":                               231,
		"MultiLegAutoElectronicTrade":                       232,
		"MultiLegAuction":                                   233,
		"MultiLegCross":                                     234,
		"MultiLegFloorTrade":                                235,
		"MultiLegAutoElectronicTradeAgainstSingleLeg":       236,
		"StockOptionsAuction":                               237,
		"MultiLegAuctionAgainstSingleLeg":                   238,
		"MultiLegFloorTradeAgainstSingleLeg":                239,
		"StockOptionsAutoElectronicTrade":                   240,
		"StockOptionsCross":                                 241,
		"StockOptionsFloorTrade":                            242,
		"StockOptionsAutoElectronicTradeAgainstSingleLeg":   243,
		"StockOptionsAuctionAgainstSingleLeg":               244,
		"StockOptionsFloorTradeAgainstSingleLeg":            245,
		"MultiLegFloorTradeOfProprietaryProducts":           246,
		"MultilateralCompressionTradeOfProprietaryProducts": 247,
		"ExtendedHoursTrade":                                248,
	}
)

func (x Financial_Trades_Condition) Enum() *Financial_Trades_Condition {
	p := new(Financial_Trades_Condition)
	*p = x
	return p
}

func (x Financial_Trades_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Trades_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[12].Descriptor()
}

func (Financial_Trades_Condition) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[12]
}

func (x Financial_Trades_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Trades_Condition.Descriptor instead.
func (Financial_Trades_Condition) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 5, 0}
}

// Describes the correction condition associated with a trade entry
type Financial_Trades_CorrectionCode int32

const (
	Financial_Trades_NotCorrected  Financial_Trades_CorrectionCode = 0 // 00: Regular trade which was not corrected, changed or signified as cacel or error
	Financial_Trades_LateCorrected Financial_Trades_CorrectionCode = 1 // 01: Original trade which was later corrected (This record contains the originl
	//     time - HHMM and the corrected data for the trade)
	Financial_Trades_Erroneous        Financial_Trades_CorrectionCode = 7  // 07: Original trade which was later marked as erroreous
	Financial_Trades_Cancel           Financial_Trades_CorrectionCode = 8  // 08: Original trade which was later cancelled
	Financial_Trades_CancelRecord     Financial_Trades_CorrectionCode = 10 // 10: Cancel record (This record follows '08' records)
	Financial_Trades_ErrorRecord      Financial_Trades_CorrectionCode = 11 // 11: Error record (This record follows '07' records)
	Financial_Trades_CorrectionRecord Financial_Trades_CorrectionCode = 12 // 12: Correction record (This record follows '01' records and contains the
)

// Enum value maps for Financial_Trades_CorrectionCode.
var (
	Financial_Trades_CorrectionCode_name = map[int32]string{
		0:  "NotCorrected",
		1:  "LateCorrected",
		7:  "Erroneous",
		8:  "Cancel",
		10: "CancelRecord",
		11: "ErrorRecord",
		12: "CorrectionRecord",
	}
	Financial_Trades_CorrectionCode_value = map[string]int32{
		"NotCorrected":     0,
		"LateCorrected":    1,
		"Erroneous":        7,
		"Cancel":           8,
		"CancelRecord":     10,
		"ErrorRecord":      11,
		"CorrectionRecord": 12,
	}
)

func (x Financial_Trades_CorrectionCode) Enum() *Financial_Trades_CorrectionCode {
	p := new(Financial_Trades_CorrectionCode)
	*p = x
	return p
}

func (x Financial_Trades_CorrectionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Financial_Trades_CorrectionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_financial_proto_enumTypes[13].Descriptor()
}

func (Financial_Trades_CorrectionCode) Type() protoreflect.EnumType {
	return &file_protos_common_financial_proto_enumTypes[13]
}

func (x Financial_Trades_CorrectionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Financial_Trades_CorrectionCode.Descriptor instead.
func (Financial_Trades_CorrectionCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 5, 1}
}

// Namespace for financial messages and enums
type Financial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial) Reset() {
	*x = Financial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial) ProtoMessage() {}

func (x *Financial) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial.ProtoReflect.Descriptor instead.
func (*Financial) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0}
}

// Namespace for common messages and enums
type Financial_Common struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial_Common) Reset() {
	*x = Financial_Common{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial_Common) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial_Common) ProtoMessage() {}

func (x *Financial_Common) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial_Common.ProtoReflect.Descriptor instead.
func (*Financial_Common) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 0}
}

// Namespace for dividends-related messages
type Financial_Dividends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial_Dividends) Reset() {
	*x = Financial_Dividends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial_Dividends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial_Dividends) ProtoMessage() {}

func (x *Financial_Dividends) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial_Dividends.ProtoReflect.Descriptor instead.
func (*Financial_Dividends) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 1}
}

// Namespace for exchanges-related messages
type Financial_Exchanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial_Exchanges) Reset() {
	*x = Financial_Exchanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial_Exchanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial_Exchanges) ProtoMessage() {}

func (x *Financial_Exchanges) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial_Exchanges.ProtoReflect.Descriptor instead.
func (*Financial_Exchanges) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 2}
}

// Namespace for options-related messages
type Financial_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial_Options) Reset() {
	*x = Financial_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial_Options) ProtoMessage() {}

func (x *Financial_Options) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial_Options.ProtoReflect.Descriptor instead.
func (*Financial_Options) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 3}
}

// Namespace for quotes-related messages
type Financial_Quotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial_Quotes) Reset() {
	*x = Financial_Quotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial_Quotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial_Quotes) ProtoMessage() {}

func (x *Financial_Quotes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial_Quotes.ProtoReflect.Descriptor instead.
func (*Financial_Quotes) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 4}
}

// Namespace for trades-related messages
type Financial_Trades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial_Trades) Reset() {
	*x = Financial_Trades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_financial_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial_Trades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial_Trades) ProtoMessage() {}

func (x *Financial_Trades) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_financial_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial_Trades.ProtoReflect.Descriptor instead.
func (*Financial_Trades) Descriptor() ([]byte, []int) {
	return file_protos_common_financial_proto_rawDescGZIP(), []int{0, 5}
}

var File_protos_common_financial_proto protoreflect.FileDescriptor

var file_protos_common_financial_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x95,
	0x45, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x1a, 0xe3, 0x05, 0x0a,
	0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x68, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x10, 0x05, 0x22, 0xb6,
	0x04, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x59, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x41,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x05, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x75, 0x6e, 0x64, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x10, 0x0f, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x65, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x13, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x75, 0x73, 0x74, 0x10, 0x15,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x54, 0x46, 0x10, 0x19, 0x22, 0x1c, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x10, 0x01, 0x22, 0x1b, 0x0a, 0x04, 0x54, 0x61, 0x70, 0x65, 0x12, 0x05, 0x0a,
	0x01, 0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43,
	0x10, 0x02, 0x1a, 0xa2, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73,
	0x22, 0x65, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x65, 0x6d, 0x69, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0d, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x43, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x43, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x54, 0x10, 0x03, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x50, 0x10, 0x04, 0x1a, 0x3c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52,
	0x46, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x52, 0x46, 0x10, 0x03, 0x1a, 0x9e, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x2c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x75, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x02, 0x22,
	0x39, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x65, 0x72, 0x6d, 0x75, 0x64, 0x61, 0x6e, 0x10, 0x02, 0x22, 0x2a, 0x0a, 0x0e, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x10, 0x01, 0x1a, 0x90, 0x26, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0xba, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x6c, 0x6f, 0x77, 0x41, 0x73, 0x6b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x6c, 0x6f, 0x77, 0x42, 0x69, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x77,
	0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x6c, 0x6f, 0x77,
	0x44, 0x75, 0x65, 0x4c, 0x52, 0x50, 0x42, 0x69, 0x64, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x6c, 0x6f, 0x77, 0x44, 0x75, 0x65, 0x4c, 0x52, 0x50, 0x41, 0x73, 0x6b, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x65, 0x4e, 0x59, 0x53, 0x45, 0x4c, 0x52, 0x50,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x53, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x10, 0x09,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x69, 0x64, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x73, 0x6b, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10,
	0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x10, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x11, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x72,
	0x6d, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x73, 0x44, 0x69, 0x73, 0x73, 0x65,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x17, 0x12,
	0x29, 0x0a, 0x25, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x44, 0x69, 0x73, 0x73, 0x65,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x75,
	0x65, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x19, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x65,
	0x77, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x1b, 0x12, 0x2d, 0x0a, 0x29, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x75,
	0x65, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x10,
	0x1f, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x50, 0x65,
	0x6e, 0x6e, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x69, 0x64, 0x4e, 0x6f, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x4e, 0x6f, 0x42, 0x69, 0x64, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x55,
	0x4c, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x23, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x10,
	0x24, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57,
	0x69, 0x64, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x10, 0x26, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x65, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x55, 0x4c, 0x44, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x28, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x4c,
	0x55, 0x4c, 0x44, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10,
	0x2b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x65, 0x4c, 0x52, 0x50, 0x42,
	0x69, 0x64, 0x41, 0x73, 0x6b, 0x10, 0x47, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x10, 0x50, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x51, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x50, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x52, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x53, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x54, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x55, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x10,
	0x56, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x6e, 0x42, 0x69, 0x64, 0x53,
	0x69, 0x64, 0x65, 0x10, 0x57, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x6e,
	0x42, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x10, 0x58, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x59, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x10, 0x5a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x65,
	0x53, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x10, 0x5b, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x69, 0x64, 0x10, 0x5c, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x51, 0x53, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x5e,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xe7, 0x07, 0x22, 0xc8,
	0x1b, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x42, 0x42, 0x4e, 0x42, 0x4f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x42, 0x42, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x42, 0x4f,
	0x41, 0x62, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x02,
	0x12, 0x29, 0x0a, 0x25, 0x4e, 0x42, 0x42, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x42, 0x4f, 0x41, 0x62, 0x6f, 0x76, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x42, 0x42, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x42, 0x4f, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4e,
	0x42, 0x42, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x42, 0x4f, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x42, 0x42, 0x42, 0x65,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x4e,
	0x42, 0x4f, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x64, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41,
	0x62, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6c, 0x74, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10,
	0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x55, 0x4c, 0x44, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x55, 0x4c, 0x44, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x10, 0x13, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x42, 0x42, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x42, 0x42, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x10, 0x15,
	0x12, 0x18, 0x0a, 0x14, 0x4e, 0x42, 0x4f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x42,
	0x4f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x42, 0x42, 0x41, 0x6e, 0x64, 0x4e, 0x42, 0x4f,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x42, 0x42, 0x41, 0x6e, 0x64, 0x4e, 0x42, 0x4f,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64,
	0x10, 0x19, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x42, 0x42, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x42, 0x4f, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x10, 0x1a, 0x12,
	0x2b, 0x0a, 0x27, 0x4e, 0x42, 0x42, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x42, 0x4f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b,
	0x72, 0x75, 0x70, 0x74, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70,
	0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x20, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71,
	0x75, 0x65, 0x6e, 0x74, 0x10, 0x22, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x72, 0x75, 0x70, 0x74, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x24, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x25, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x26, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x28, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x10,
	0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6c, 0x74,
	0x10, 0x2a, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2d, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x79,
	0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x30, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x79, 0x10, 0x31, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x33, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x34, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x35, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x36, 0x12,
	0x17, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x37, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x38, 0x12,
	0x1a, 0x0a, 0x16, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x39, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61, 0x6c,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x3b, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x44, 0x69, 0x73, 0x73,
	0x65, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x3c, 0x12, 0x1f, 0x0a, 0x1b, 0x48,
	0x61, 0x6c, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x3d, 0x12, 0x2d, 0x0a, 0x29,
	0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x3e, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x61, 0x6c, 0x74, 0x45, 0x54, 0x46, 0x10, 0x3f, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61, 0x6c, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x10, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x42,
	0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61, 0x6c, 0x74, 0x53, 0x45, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x43, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x61, 0x6c,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x4f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x74, 0x59, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x46, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x61, 0x6c, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x47, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x48, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x61, 0x6c, 0x74, 0x56, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x10, 0x49, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x61, 0x6c, 0x74, 0x56, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x4a, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x4b, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x61, 0x6c, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c,
	0x79, 0x10, 0x4c, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x10, 0x4d, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x61,
	0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x10,
	0x4e, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x72, 0x74, 0x68, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x4f, 0x12,
	0x2c, 0x0a, 0x28, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x10, 0x50, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x10,
	0x51, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x10, 0x52, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x53, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x54, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x57, 0x43, 0x42, 0x43, 0x61,
	0x72, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44,
	0x61, 0x79, 0x10, 0x55, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x57, 0x43, 0x42, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x10, 0x56, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x50, 0x4f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x57, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x50, 0x4f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x58, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x57, 0x43, 0x42, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x10, 0x59, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x57, 0x43, 0x42, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x32, 0x10, 0x5a, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x57, 0x43, 0x42, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x33, 0x10, 0x5b, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x61, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x50,
	0x65, 0x6e, 0x6e, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x5c, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x10, 0x5d, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x55, 0x4c, 0x44, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x5e, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x5f, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x60, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x10, 0x61, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x62, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x10, 0x63, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x42, 0x42, 0x4f, 0x4e, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x42, 0x42, 0x4f, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x49, 0x73, 0x4e, 0x42, 0x42, 0x4f, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x42, 0x42, 0x4f, 0x4e, 0x6f, 0x42, 0x42, 0x4e, 0x6f, 0x42, 0x4f, 0x10, 0x67, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x42, 0x42, 0x4f, 0x42, 0x42, 0x42, 0x4f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x61, 0x67, 0x65, 0x10, 0x68, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x42, 0x42,
	0x4f, 0x42, 0x42, 0x42, 0x4f, 0x4c, 0x6f, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x67, 0x65, 0x10, 0x69, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x6a, 0x12, 0x27, 0x0a,
	0x23, 0x48, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x6b, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x65, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x6c, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4f, 0x6e,
	0x42, 0x69, 0x64, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x41, 0x73, 0x6b, 0x10, 0x6e, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x4f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x10, 0x6f, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x72, 0x61, 0x42, 0x42, 0x4f, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x72, 0x61, 0x42, 0x42, 0x4f, 0x44,
	0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x71, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x69, 0x6e, 0x72, 0x61, 0x42, 0x42, 0x42, 0x4f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x72, 0x61, 0x42,
	0x42, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10,
	0x73, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x72, 0x61, 0x42, 0x4f, 0x41, 0x62, 0x6f, 0x76,
	0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x74, 0x12, 0x2a, 0x0a, 0x26,
	0x46, 0x69, 0x6e, 0x72, 0x61, 0x42, 0x42, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x64, 0x42, 0x4f, 0x41, 0x62, 0x62, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x75, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x54, 0x41, 0x4e,
	0x6f, 0x74, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x76, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x54, 0x41, 0x44,
	0x75, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x10, 0x77, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x54, 0x41, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x78, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x54, 0x41, 0x49, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x54, 0x41, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x7a, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x54, 0x41, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x7b, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x54, 0x41, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x7c, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x54, 0x41, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6d,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x7d, 0x1a, 0x8a, 0x16, 0x0a, 0x06, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x22, 0xf3, 0x14, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x61, 0x6c,
	0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x41, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x09, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x6d, 0x54,
	0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x77, 0x65, 0x65, 0x70,
	0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10,
	0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x10, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x11, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x12, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10,
	0x15, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x75,
	0x6c, 0x65, 0x31, 0x35, 0x35, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x75, 0x6c, 0x65, 0x31, 0x32, 0x37, 0x4e, 0x59, 0x53, 0x45, 0x10, 0x18, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x19,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x1b, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x1d, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x10, 0x1e, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x6f, 0x6c, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6f,
	0x6c, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x64, 0x4f,
	0x75, 0x74, 0x4f, 0x66, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x21, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x22, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x23, 0x12,
	0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x64, 0x64, 0x4c, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x6c,
	0x64, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x68, 0x72, 0x75,
	0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x6e, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x2a, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x6e,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10,
	0x2c, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x10, 0x2d, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2e, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x73, 0x4f, 0x66, 0x10, 0x2f, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x73, 0x4f,
	0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x30, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x73, 0x4f, 0x66, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x31, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x4f, 0x42, 0x10, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x34, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x10, 0x35, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x10, 0x36, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x10, 0x38, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x39, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x10, 0x3a, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x3b,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x10, 0x3c, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x10, 0x3e, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x3f, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x40, 0x12, 0x27, 0x0a, 0x23,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x10, 0x41, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74,
	0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x42, 0x12,
	0x29, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x43, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x10, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10,
	0x46, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x47, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0xc9, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4c, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x10, 0xca, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0xcb, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x61,
	0x74, 0x65, 0x10, 0xcc, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x10, 0xcd, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10, 0xce, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x6e,
	0x6c, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x10, 0xcf, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x10, 0xd0, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd1, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x10, 0xd2, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0xdb, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x49, 0x53, 0x4f, 0x10, 0xe3, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x53, 0x4f, 0x10, 0xe4, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4c, 0x65, 0x67, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4e, 0x6f, 0x6e, 0x49, 0x53, 0x4f, 0x10, 0xe5,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x49, 0x53, 0x4f, 0x10, 0xe6, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x10, 0xe7, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x67, 0x41,
	0x75, 0x74, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x10, 0xe8, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65,
	0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x67, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x10, 0xea, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xeb, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4c, 0x65, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x10, 0xec, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xed, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x67,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x10, 0xee, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4c, 0x65, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67,
	0x10, 0xef, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xf0, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x10, 0xf1,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xf2, 0x01, 0x12, 0x34,
	0x0a, 0x2f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65,
	0x67, 0x10, 0xf3, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x10, 0xf4, 0x01, 0x12, 0x2b,
	0x0a, 0x26, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x67, 0x10, 0xf5, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x10, 0xf6, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x10, 0xf7,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xf8, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x0a, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x0b,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x10, 0x0c, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x65, 0x66, 0x69, 0x6e, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x6f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_common_financial_proto_rawDescOnce sync.Once
	file_protos_common_financial_proto_rawDescData = file_protos_common_financial_proto_rawDesc
)

func file_protos_common_financial_proto_rawDescGZIP() []byte {
	file_protos_common_financial_proto_rawDescOnce.Do(func() {
		file_protos_common_financial_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_common_financial_proto_rawDescData)
	})
	return file_protos_common_financial_proto_rawDescData
}

var file_protos_common_financial_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_protos_common_financial_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_protos_common_financial_proto_goTypes = []interface{}{
	(Financial_Common_AssetClass)(0),      // 0: protos.common.Financial.Common.AssetClass
	(Financial_Common_AssetType)(0),       // 1: protos.common.Financial.Common.AssetType
	(Financial_Common_Locale)(0),          // 2: protos.common.Financial.Common.Locale
	(Financial_Common_Tape)(0),            // 3: protos.common.Financial.Common.Tape
	(Financial_Dividends_Frequency)(0),    // 4: protos.common.Financial.Dividends.Frequency
	(Financial_Dividends_Type)(0),         // 5: protos.common.Financial.Dividends.Type
	(Financial_Exchanges_Type)(0),         // 6: protos.common.Financial.Exchanges.Type
	(Financial_Options_ContractType)(0),   // 7: protos.common.Financial.Options.ContractType
	(Financial_Options_ExerciseStyle)(0),  // 8: protos.common.Financial.Options.ExerciseStyle
	(Financial_Options_UnderlyingType)(0), // 9: protos.common.Financial.Options.UnderlyingType
	(Financial_Quotes_Condition)(0),       // 10: protos.common.Financial.Quotes.Condition
	(Financial_Quotes_Indicator)(0),       // 11: protos.common.Financial.Quotes.Indicator
	(Financial_Trades_Condition)(0),       // 12: protos.common.Financial.Trades.Condition
	(Financial_Trades_CorrectionCode)(0),  // 13: protos.common.Financial.Trades.CorrectionCode
	(*Financial)(nil),                     // 14: protos.common.Financial
	(*Financial_Common)(nil),              // 15: protos.common.Financial.Common
	(*Financial_Dividends)(nil),           // 16: protos.common.Financial.Dividends
	(*Financial_Exchanges)(nil),           // 17: protos.common.Financial.Exchanges
	(*Financial_Options)(nil),             // 18: protos.common.Financial.Options
	(*Financial_Quotes)(nil),              // 19: protos.common.Financial.Quotes
	(*Financial_Trades)(nil),              // 20: protos.common.Financial.Trades
}
var file_protos_common_financial_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_common_financial_proto_init() }
func file_protos_common_financial_proto_init() {
	if File_protos_common_financial_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_common_financial_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_financial_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial_Common); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_financial_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial_Dividends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_financial_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial_Exchanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_financial_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_financial_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial_Quotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_financial_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial_Trades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_common_financial_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_common_financial_proto_goTypes,
		DependencyIndexes: file_protos_common_financial_proto_depIdxs,
		EnumInfos:         file_protos_common_financial_proto_enumTypes,
		MessageInfos:      file_protos_common_financial_proto_msgTypes,
	}.Build()
	File_protos_common_financial_proto = out.File
	file_protos_common_financial_proto_rawDesc = nil
	file_protos_common_financial_proto_goTypes = nil
	file_protos_common_financial_proto_depIdxs = nil
}
